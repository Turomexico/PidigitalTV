<html>
<head>
    <title>Ordenes De Servicio RRScooters CDMX ( Condesa )</title>
    <style>
        /* Todos los estilos originales se mantienen igual */
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .calculator {
            background-color: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input, select, button, textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-sizing: border-box;
        }
        textarea {
            min-height: 100px;
            resize: vertical;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            margin-top: 10px;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #45a049;
        }
        .results {
            margin-top: 20px;
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
            position: sticky;
            top: 0;
        }
        .delete-btn {
            background-color: #f44336;
            padding: 5px 10px;
            width: auto;
        }
        .summary-card {
            background-color: #e8f5e9;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            overflow-x: auto;
        }
        .tab {
            padding: 10px 20px;
            background-color: #ddd;
            cursor: pointer;
            border-radius: 5px 5px 0 0;
            margin-right: 5px;
            white-space: nowrap;
        }
        .tab.active {
            background-color: #4CAF50;
            color: white;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .export-btn {
            background-color: #2196F3;
            margin-top: 20px;
        }
        .export-btn:hover {
            background-color: #0b7dda;
        }
        .notes-btn {
            background-color: #FF9800;
            padding: 5px 10px;
            width: auto;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 700px;
            border-radius: 5px;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        .close:hover {
            color: black;
        }
        .notes-display {
            background-color: #fffde7;
            padding: 10px;
            border-left: 4px solid #FFC107;
            margin: 10px 0;
        }
        .status-select {
            width: auto;
            margin-left: 10px;
        }
        .status-completed {
            background-color: #e8f5e9;
        }
        .status-pending {
            background-color: #fff3e0;
        }
        .status-repair {
            background-color: #ffebee;
        }
        .customer-info {
            background-color: #e3f2fd;
            padding: 10px;
            border-left: 4px solid #2196F3;
            margin: 10px 0;
        }
        
        /* Nuevos estilos para el login */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f5f5f5;
        }
        .login-box {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            width: 300px;
            text-align: center;
        }
        .login-box h2 {
            margin-top: 0;
            color: #333;
        }
        .login-box input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-sizing: border-box;
        }
        .login-box button {
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }
        .login-box button:hover {
            background-color: #45a049;
        }
        .error-message {
            color: #f44336;
            margin-top: 10px;
            font-size: 14px;
        }
        
        /* Estilo para acciones restringidas */
        .restricted-action {
            opacity: 0.5;
            cursor: not-allowed;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <!-- Nuevo contenedor de login -->
    <div id="loginContainer" class="login-container">
        <div class="login-box">
            <h2>Iniciar Sesión</h2>
            <input type="text" id="username" placeholder="Usuario" required>
            <input type="password" id="password" placeholder="Contraseña" required>
            <button onclick="checkLogin()">Acceder</button>
            <div id="loginError" class="error-message"></div>
        </div>
    </div>
    
    <!-- Contenedor principal (originalmente visible, ahora oculto hasta login) -->
    <div id="mainContainer" class="calculator" style="display: none;">
        <h1>Orden De Servicio R.R</h1>
        
        <div class="tabs">
            <div class="tab active" onclick="switchTab('venta')">Nueva Reparación</div>
            <div class="tab" onclick="switchTab('historico')">Historial</div>
            <div class="tab" onclick="switchTab('resumen')">Resumen</div>
            <div class="tab" onclick="switchTab('notas')">Notas Pendientes</div>
        </div>
        
        <!-- Todo el resto del HTML original se mantiene igual -->
        <div id="venta" class="tab-content active">
            <div class="form-group">
                <label for="customerName">Nombre del Cliente:</label>
                <input type="text" id="customerName" placeholder="Ej. Juan Pérez">
            </div>
            
            <div class="form-group">
                <label for="customerPhone">Teléfono del Cliente:</label>
                <input type="tel" id="customerPhone" placeholder="Ej. 555-1234567">
            </div>
            
            <div class="form-group">
                <label for="itemName">Modelo del Scooter:</label>
                <input type="text" id="itemName" placeholder="Ej. Dualtron X Limited">
            </div>
            
            <div class="form-group">
                <label for="repairCost">Costo de Reparación ($):</label>
                <input type="number" id="repairCost" placeholder="0.00" step="0.01" min="0">
            </div>
            
            <div class="form-group">
                <label for="commissionRate">Porcentaje de Comisión (%):</label>
                <input type="number" id="commissionRate" value="10" min="0" max="100">
            </div>
            
            <div class="form-group">
                <label for="salesPerson">Técnico:</label>
                <input type="text" id="salesPerson" placeholder="Nombre del écnico">
            </div>
            
            <div class="form-group">
                <label for="saleDate">Fecha:</label>
                <input type="date" id="saleDate">
            </div>
            
            <div class="form-group">
                <label for="repairStatus">Estado:</label>
                <select id="repairStatus" class="status-select">
                    <option value="completed">Completado</option>
                    <option value="pending">Pendiente</option>
                    <option value="repair">En Reparación</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="repairNotes">Notas de Reparación:</label>
                <textarea id="repairNotes" placeholder="Detalles de la reparación, problemas encontrados, piezas cambiadas, etc."></textarea>
            </div>
            
            <button id="addItem">Registrar Reparación</button>
        </div>
        
        <div id="historico" class="tab-content">
            <h3>Histórico Completo</h3>
            <div class="form-group">
                <input type="text" id="searchInput" placeholder="Buscar por cliente, modelo, técnico o estado...">
            </div>
            <div id="salesHistory">
                <table id="historyTable">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Cliente</th>
                            <th>Teléfono</th>
                            <th>Modelo</th>
                            <th>Costo</th>
                            <th>Comisión</th>
                            <th>Técnico</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="historyTableBody">
                        <!-- El histórico se cargará aquí -->
                    </tbody>
                </table>
            </div>
            <button class="export-btn" onclick="exportToCSV()">Exportar a Excel</button>
        </div>
        
        <div id="resumen" class="tab-content">
            <h3>Resumen General</h3>
            <div class="summary-card">
                <p><strong>Total Reparaciones:</strong> $<span id="totalSales">0.00</span></p>
                <p><strong>Total Comisiones:</strong> $<span id="totalCommissions">0.00</span></p>
                <p><strong>Cantidad de Scooters:</strong> <span id="totalUnits">0</span></p>
                <p><strong>Scooter Atendidos:</strong> <span id="totalCustomers">0</span></p>
                <p><strong>Completados:</strong> <span id="completedCount">0</span> | 
                   <strong>Pendientes:</strong> <span id="pendingCount">0</span> | 
                   <strong>En Reparación:</strong> <span id="repairCount">0</span></p>
            </div>
            
            <h4>Comisiones por Tecnico</h4>
            <table id="salesByPerson">
                <thead>
                    <tr>
                        <th>Tecnico</th>
                        <th>Comisiones Para El Tecnico</th>
                        <th>Comisiones</th>
                        <th>Clientes</th>
                    </tr>
                </thead>
                <tbody id="salesByPersonBody">
                    <!-- Resumen por técnico -->
                </tbody>
            </table>
            
            <h4>Reparaciones/Ventas por Modelo</h4>
            <table id="salesByModel">
                <thead>
                    <tr>
                        <th>Modelo</th>
                        <th>Unidades</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody id="salesByModelBody">
                    <!-- Resumen por modelo -->
                </tbody>
            </table>
        </div>
        
        <div id="notas" class="tab-content">
            <h3>Notas de Reparación Pendientes</h3>
            <div class="form-group">
                <input type="text" id="searchNotesInput" placeholder="Buscar por cliente, modelo o notas...">
            </div>
            <div id="pendingRepairs">
                <!-- Notas pendientes se cargarán aquí -->
            </div>
        </div>
    </div>

    <!-- Modal para ver/editar notas -->
    <div id="notesModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3 id="modalTitle">Notas de Reparación</h3>
            <div class="customer-info">
                <p><strong>Cliente:</strong> <span id="modalCustomer"></span></p>
                <p><strong>Teléfono:</strong> <span id="modalPhone"></span></p>
                <p><strong>Modelo:</strong> <span id="modalModel"></span></p>
                <p><strong>Fecha:</strong> <span id="modalDate"></span></p>
                <p><strong>Técnico:</strong> <span id="modalTech"></span></p>
            </div>
            <div class="form-group">
                <label for="modalCost">Costo de Reparación ($):</label>
                <input type="number" id="modalCost" placeholder="0.00" step="0.01" min="0">
            </div>
            <div class="form-group">
                <label for="modalStatus">Estado:</label>
                <select id="modalStatus" class="status-select">
                    <option value="completed">Completado</option>
                    <option value="pending">Pendiente</option>
                    <option value="repair">En Reparación</option>
                </select>
            </div>
            <div class="form-group">
                <label for="modalNotes">Notas:</label>
                <textarea id="modalNotes"></textarea>
            </div>
            <button id="saveNotesBtn" onclick="saveNotesChanges()">Guardar Cambios</button>
        </div>
    </div>

    <script>
        // Variables globales
        let salesHistory = JSON.parse(localStorage.getItem('scooterSales')) || [];
        let commissionRate = 10;
        let currentEditingId = null;
        let currentUser = null;
        
        // Elementos del DOM
        const customerNameInput = document.getElementById('customerName');
        const customerPhoneInput = document.getElementById('customerPhone');
        const itemNameInput = document.getElementById('itemName');
        const repairCostInput = document.getElementById('repairCost');
        const commissionRateInput = document.getElementById('commissionRate');
        const salesPersonInput = document.getElementById('salesPerson');
        const saleDateInput = document.getElementById('saleDate');
        const repairStatusInput = document.getElementById('repairStatus');
        const repairNotesInput = document.getElementById('repairNotes');
        const addItemBtn = document.getElementById('addItem');
        const searchInput = document.getElementById('searchInput');
        const searchNotesInput = document.getElementById('searchNotesInput');
        const historyTableBody = document.getElementById('historyTableBody');
        const pendingRepairsDiv = document.getElementById('pendingRepairs');
        const modal = document.getElementById('notesModal');
        const closeModal = document.getElementsByClassName('close')[0];
        const saveNotesBtn = document.getElementById('saveNotesBtn');
        
        // Usuarios válidos
        const validUsers = {
            'Arturo': '8585',
            'Ventas': '1234'
        };
        
        // Función para verificar el login
        function checkLogin() {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const errorElement = document.getElementById('loginError');
            
            if (validUsers[username] && validUsers[username] === password) {
                currentUser = username;
                document.getElementById('loginContainer').style.display = 'none';
                document.getElementById('mainContainer').style.display = 'block';
                
                // Configurar fecha actual por defecto
                const today = new Date().toISOString().split('T')[0];
                saleDateInput.value = today;
                loadSalesHistory();
                updateSummary();
                loadPendingNotes();
                
                // Aplicar restricciones según el tipo de usuario
                applyUserRestrictions();
            } else {
                errorElement.textContent = 'Usuario o contraseña incorrectos';
            }
        }
        
        // Aplicar restricciones según el tipo de usuario
        function applyUserRestrictions() {
            if (currentUser === 'Ventas') {
                // Ocultar o deshabilitar elementos de edición/eliminación
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.style.display = 'none';
                });
                
                // Deshabilitar exportación para Ventas
                document.querySelector('.export-btn').classList.add('restricted-action');
                
                // Cambiar texto para indicar modo de solo lectura
                document.querySelector('h1').textContent += ' (Modo Ventas)';
            }
        }
        
        // Permitir login al presionar Enter
        document.getElementById('password').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                checkLogin();
            }
        });
        
        // Función para registrar una nueva reparación/
        function addItem() {
            const customerName = customerNameInput.value.trim();
            const customerPhone = customerPhoneInput.value.trim();
            const model = itemNameInput.value.trim();
            const price = parseFloat(repairCostInput.value);
            const salesPerson = salesPersonInput.value.trim();
            const saleDate = saleDateInput.value;
            const status = repairStatusInput.value;
            const notes = repairNotesInput.value.trim();
            commissionRate = parseFloat(commissionRateInput.value);
            
            if (!customerName || !model || isNaN(price) || price < 0 || !salesPerson || !saleDate) {
                alert('Por favor complete todos los campos obligatorios');
                return;
            }
            
            const commission = price * (commissionRate / 100);
            
            // Crear registro de reparación/
            const saleRecord = {
                id: Date.now(),
                date: saleDate,
                customerName: customerName,
                customerPhone: customerPhone,
                model: model,
                price: price,
                commissionRate: commissionRate,
                commission: commission,
                salesPerson: salesPerson,
                status: status,
                notes: notes,
                lastUpdated: new Date().toISOString(),
                registeredBy: currentUser // Agregamos quién registró la reparación
            };
            
            // Agregar al Historial
            salesHistory.push(saleRecord);
            saveToLocalStorage();
            
            // Actualizar la interfaz
            loadSalesHistory();
            updateSummary();
            loadPendingNotes();
            
            // Limpiar campos
            customerNameInput.value = '';
            customerPhoneInput.value = '';
            itemNameInput.value = '';
            repairCostInput.value = '';
            salesPersonInput.value = '';
            repairNotesInput.value = '';
            customerNameInput.focus();
            
            alert(`Registro exitoso!\nCliente: ${customerName}\nModelo: ${model}\nEstado: ${getStatusText(status)}`);
        }
        
        // Función para cargar el Historial
        function loadSalesHistory() {
            historyTableBody.innerHTML = '';
            const searchTerm = searchInput.value.toLowerCase();
            
            const filteredSales = salesHistory.filter(sale => 
                sale.customerName.toLowerCase().includes(searchTerm) ||
                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm)) ||
                sale.model.toLowerCase().includes(searchTerm) || 
                sale.salesPerson.toLowerCase().includes(searchTerm) ||
                sale.status.toLowerCase().includes(searchTerm)
            );
            
            if (filteredSales.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = '<td colspan="9" style="text-align: center;">No se encontraron registros</td>';
                historyTableBody.appendChild(row);
                return;
            }
            
            filteredSales.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            filteredSales.forEach(sale => {
                const row = document.createElement('tr');
                row.className = `status-${sale.status}`;
                
                const dateCell = document.createElement('td');
                dateCell.textContent = formatDate(sale.date);
                
                const customerCell = document.createElement('td');
                customerCell.textContent = sale.customerName;
                
                const phoneCell = document.createElement('td');
                phoneCell.textContent = sale.customerPhone || 'N/A';
                
                const modelCell = document.createElement('td');
                modelCell.textContent = sale.model;
                
                const priceCell = document.createElement('td');
                priceCell.textContent = '$' + sale.price.toFixed(2);
                
                const commissionCell = document.createElement('td');
                commissionCell.textContent = '$' + sale.commission.toFixed(2);
                
                const salesPersonCell = document.createElement('td');
                salesPersonCell.textContent = sale.salesPerson;
                
                const statusCell = document.createElement('td');
                statusCell.textContent = getStatusText(sale.status);
                
                const actionCell = document.createElement('td');
                
                const notesBtn = document.createElement('button');
                notesBtn.textContent = 'Notas';
                notesBtn.className = 'notes-btn';
                notesBtn.addEventListener('click', () => openNotesModal(sale.id));
                
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Eliminar';
                deleteBtn.className = 'delete-btn';
                deleteBtn.addEventListener('click', () => deleteSale(sale.id));
                
                // Aplicar restricciones si el usuario es Ventas
                if (currentUser === 'Ventas') {
                    deleteBtn.style.display = 'none';
                    notesBtn.classList.add('restricted-action');
                }
                
                actionCell.appendChild(notesBtn);
                actionCell.appendChild(document.createTextNode(' '));
                actionCell.appendChild(deleteBtn);
                
                row.appendChild(dateCell);
                row.appendChild(customerCell);
                row.appendChild(phoneCell);
                row.appendChild(modelCell);
                row.appendChild(priceCell);
                row.appendChild(commissionCell);
                row.appendChild(salesPersonCell);
                row.appendChild(statusCell);
                row.appendChild(actionCell);
                
                historyTableBody.appendChild(row);
            });
        }
        
        // Función para cargar notas pendientes
        function loadPendingNotes() {
            pendingRepairsDiv.innerHTML = '';
            const searchTerm = searchNotesInput.value.toLowerCase();
            
            const pendingItems = salesHistory.filter(sale => 
                sale.status !== 'completed' && 
                (sale.customerName.toLowerCase().includes(searchTerm) ||
                (sale.customerPhone && sale.customerPhone.toLowerCase().includes(searchTerm)) ||
                sale.model.toLowerCase().includes(searchTerm) || 
                (sale.notes && sale.notes.toLowerCase().includes(searchTerm)) ||
                sale.salesPerson.toLowerCase().includes(searchTerm))
            );
            
            if (pendingItems.length === 0) {
                pendingRepairsDiv.innerHTML = '<p>No hay reparaciones pendientes</p>';
                return;
            }
            
            pendingItems.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            pendingItems.forEach(item => {
                const card = document.createElement('div');
                card.className = `results status-${item.status}`;
                
                const title = document.createElement('h4');
                title.textContent = `${item.model} - ${getStatusText(item.status)}`;
                
                const customerInfo = document.createElement('div');
                customerInfo.className = 'customer-info';
                customerInfo.innerHTML = `<p><strong>Cliente:</strong> ${item.customerName}</p>
                                         <p><strong>Teléfono:</strong> ${item.customerPhone || 'N/A'}</p>`;
                
                const details = document.createElement('p');
                details.innerHTML = `<strong>Fecha:</strong> ${formatDate(item.date)} | 
                                    <strong>Técnico:</strong> ${item.salesPerson} | 
                                    <strong>Costo:</strong> $${item.price.toFixed(2)}`;
                
                const notes = document.createElement('div');
                notes.className = 'notes-display';
                notes.textContent = item.notes || 'Sin notas registradas';
                
                const actions = document.createElement('div');
                actions.style.marginTop = '10px';
                
                const editBtn = document.createElement('button');
                editBtn.textContent = 'Editar';
                editBtn.className = 'notes-btn';
                editBtn.style.marginRight = '5px';
                editBtn.addEventListener('click', () => openNotesModal(item.id));
                
                const completeBtn = document.createElement('button');
                completeBtn.textContent = 'Marcar como Completado';
                completeBtn.style.backgroundColor = '#4CAF50';
                completeBtn.style.padding = '5px 10px';
                completeBtn.addEventListener('click', () => markAsCompleted(item.id));
                
                // Aplicar restricciones si el usuario es Ventas
                if (currentUser === 'Ventas') {
                    editBtn.classList.add('restricted-action');
                    completeBtn.classList.add('restricted-action');
                }
                
                actions.appendChild(editBtn);
                if (item.status !== 'completed') {
                    actions.appendChild(completeBtn);
                }
                
                card.appendChild(title);
                card.appendChild(customerInfo);
                card.appendChild(details);
                card.appendChild(notes);
                card.appendChild(actions);
                
                pendingRepairsDiv.appendChild(card);
            });
        }
        
        // Función para abrir el modal de notas
        function openNotesModal(id) {
            const item = salesHistory.find(sale => sale.id === id);
            if (!item) return;
            
            currentEditingId = id;
            
            document.getElementById('modalTitle').textContent = `Notas: ${item.model}`;
            document.getElementById('modalCustomer').textContent = item.customerName;
            document.getElementById('modalPhone').textContent = item.customerPhone || 'N/A';
            document.getElementById('modalModel').textContent = item.model;
            document.getElementById('modalDate').textContent = formatDate(item.date);
            document.getElementById('modalTech').textContent = item.salesPerson;
            document.getElementById('modalCost').value = item.price;
            document.getElementById('modalStatus').value = item.status;
            document.getElementById('modalNotes').value = item.notes;
            
            // Aplicar restricciones si el usuario es Ventas
            if (currentUser === 'Ventas') {
                document.getElementById('modalStatus').disabled = true;
                document.getElementById('modalNotes').disabled = true;
                document.getElementById('modalCost').disabled = true;
                saveNotesBtn.classList.add('restricted-action');
            } else {
                document.getElementById('modalStatus').disabled = false;
                document.getElementById('modalNotes').disabled = false;
                document.getElementById('modalCost').disabled = false;
                saveNotesBtn.classList.remove('restricted-action');
            }
            
            modal.style.display = 'block';
        }
        
        // Función para guardar cambios en las notas
        function saveNotesChanges() {
            if (currentUser === 'Ventas') {
                alert('No tienes permisos para editar registros');
                return;
            }
            
            const itemIndex = salesHistory.findIndex(sale => sale.id === currentEditingId);
            if (itemIndex === -1) return;
            
            const newPrice = parseFloat(document.getElementById('modalCost').value);
            if (isNaN(newPrice)) {
                alert('Por favor ingrese un costo válido');
                return;
            }
            
            salesHistory[itemIndex].price = newPrice;
            salesHistory[itemIndex].commission = newPrice * (salesHistory[itemIndex].commissionRate / 100);
            salesHistory[itemIndex].status = document.getElementById('modalStatus').value;
            salesHistory[itemIndex].notes = document.getElementById('modalNotes').value;
            salesHistory[itemIndex].lastUpdated = new Date().toISOString();
            
            saveToLocalStorage();
            loadSalesHistory();
            updateSummary();
            loadPendingNotes();
            modal.style.display = 'none';
        }
        
        // Función para marcar como completado
        function markAsCompleted(id) {
            if (currentUser === 'Ventas') {
                alert('No tienes permisos para modificar registros');
                return;
            }
            
            const itemIndex = salesHistory.findIndex(sale => sale.id === id);
            if (itemIndex === -1) return;
            
            salesHistory[itemIndex].status = 'completed';
            salesHistory[itemIndex].lastUpdated = new Date().toISOString();
            
            saveToLocalStorage();
            loadSalesHistory();
            updateSummary();
            loadPendingNotes();
        }
        
        // Función para eliminar un registro
        function deleteSale(id) {
            if (currentUser === 'Ventas') {
                alert('No tienes permisos para eliminar registros');
                return;
            }
            
            if (confirm('¿Está seguro que desea eliminar este registro permanentemente?')) {
                salesHistory = salesHistory.filter(sale => sale.id !== id);
                saveToLocalStorage();
                loadSalesHistory();
                updateSummary();
                loadPendingNotes();
            }
        }
        
        // Función para exportar a CSV
        function exportToCSV() {
            if (currentUser === 'Ventas') {
                alert('No tienes permisos para exportar datos');
                return;
            }
            
            if (salesHistory.length === 0) {
                alert('No hay datos para exportar');
                return;
            }
            
            let csv = 'Fecha,Cliente,Teléfono,Modelo,Costo,Comisión %,Comisión,Técnico,Estado,Notas,Última Actualización,Registrado por\n';
            
            salesHistory.forEach(sale => {
                csv += `"${formatDate(sale.date)}","${sale.customerName}","${sale.customerPhone || ''}","${sale.model}",${sale.price},${sale.commissionRate}%,${sale.commission},"${sale.salesPerson}","${getStatusText(sale.status)}","${sale.notes.replace(/"/g, '""')}","${new Date(sale.lastUpdated).toLocaleString()}","${sale.registeredBy || 'N/A'}"\n`;
            });
            
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', `registro_scooters_${new Date().toISOString().slice(0,10)}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // Función para actualizar el resumen
        function updateSummary() {
            // Totales generales
            const totalSales = salesHistory.reduce((sum, sale) => sum + sale.price, 0);
            const totalCommissions = salesHistory.reduce((sum, sale) => sum + sale.commission, 0);
            const completedCount = salesHistory.filter(sale => sale.status === 'completed').length;
            const pendingCount = salesHistory.filter(sale => sale.status === 'pending').length;
            const repairCount = salesHistory.filter(sale => sale.status === 'repair').length;
            
            // Contar clientes únicos
            const uniqueCustomers = new Set(salesHistory.map(sale => sale.customerName)).size;
            
            document.getElementById('totalSales').textContent = totalSales.toFixed(2);
            document.getElementById('totalCommissions').textContent = totalCommissions.toFixed(2);
            document.getElementById('totalUnits').textContent = salesHistory.length;
            document.getElementById('totalCustomers').textContent = uniqueCustomers;
            document.getElementById('completedCount').textContent = completedCount;
            document.getElementById('pendingCount').textContent = pendingCount;
            document.getElementById('repairCount').textContent = repairCount;
            
            // Resumen por técnico
            const salesByPerson = {};
            salesHistory.forEach(sale => {
                if (!salesByPerson[sale.salesPerson]) {
                    salesByPerson[sale.salesPerson] = {
                        sales: 0,
                        commissions: 0,
                        customers: new Set()
                    };
                }
                salesByPerson[sale.salesPerson].sales += sale.price;
                salesByPerson[sale.salesPerson].commissions += sale.commission;
                salesByPerson[sale.salesPerson].customers.add(sale.customerName);
            });
            
            const salesByPersonBody = document.getElementById('salesByPersonBody');
            salesByPersonBody.innerHTML = '';
            
            for (const [person, data] of Object.entries(salesByPerson)) {
                const row = document.createElement('tr');
                
                const personCell = document.createElement('td');
                personCell.textContent = person;
                
                const salesCell = document.createElement('td');
                salesCell.textContent = '$' + data.sales.toFixed(2);
                
                const commissionsCell = document.createElement('td');
                commissionsCell.textContent = '$' + data.commissions.toFixed(2);
                
                const customersCell = document.createElement('td');
                customersCell.textContent = data.customers.size;
                
                row.appendChild(personCell);
                row.appendChild(salesCell);
                row.appendChild(commissionsCell);
                row.appendChild(customersCell);
                
                salesByPersonBody.appendChild(row);
            }
            
            // Resumen por modelo
            const salesByModel = {};
            salesHistory.forEach(sale => {
                if (!salesByModel[sale.model]) {
                    salesByModel[sale.model] = {
                        units: 0,
                        total: 0
                    };
                }
                salesByModel[sale.model].units += 1;
                salesByModel[sale.model].total += sale.price;
            });
            
            const salesByModelBody = document.getElementById('salesByModelBody');
            salesByModelBody.innerHTML = '';
            
            for (const [model, data] of Object.entries(salesByModel)) {
                const row = document.createElement('tr');
                
                const modelCell = document.createElement('td');
                modelCell.textContent = model;
                
                const unitsCell = document.createElement('td');
                unitsCell.textContent = data.units;
                
                const totalCell = document.createElement('td');
                totalCell.textContent = '$' + data.total.toFixed(2);
                
                row.appendChild(modelCell);
                row.appendChild(unitsCell);
                row.appendChild(totalCell);
                
                salesByModelBody.appendChild(row);
            }
        }
        
        // Función para guardar en localStorage
        function saveToLocalStorage() {
            localStorage.setItem('scooterSales', JSON.stringify(salesHistory));
        }
        
        // Función para cambiar entre pestañas
        function switchTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.getElementById(tabId).classList.add('active');
            document.querySelector(`.tab[onclick="switchTab('${tabId}')"]`).classList.add('active');
            
            if (tabId === 'historico') {
                loadSalesHistory();
            } else if (tabId === 'resumen') {
                updateSummary();
            } else if (tabId === 'notas') {
                loadPendingNotes();
            }
        }
        
        // Función para formatear fecha
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'short', day: 'numeric' };
            return new Date(dateString).toLocaleDateString('es-ES', options);
        }
        
        // Función para obtener texto de estado
        function getStatusText(status) {
            const statusText = {
                'completed': 'Completado',
                'pending': 'Pendiente',
                'repair': 'En Reparación'
            };
            return statusText[status] || status;
        }
        
        // Event listeners
        addItemBtn.addEventListener('click', addItem);
        searchInput.addEventListener('input', loadSalesHistory);
        searchNotesInput.addEventListener('input', loadPendingNotes);
        closeModal.addEventListener('click', () => modal.style.display = 'none');
        
        // Cerrar modal al hacer clic fuera del contenido
        window.addEventListener('click', (event) => {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });
    </script>
</body>
</html>
